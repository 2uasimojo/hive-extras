#!/usr/bin/env -S ansible-playbook
#
# Provide a JSON-formated list of recipients and what email to use in the From field (for bounce-back emails).
# --extra-vars '{"recipeints": ["email@example.com", "email2@example.com"], "fromemail": "reply@example.com"}'
#
---
- hosts: localhost
  vars:
    iam_role_name: periodicHiveLambdaRole
    lambda_function_name: periodicHiveLambdaFunction
    cloudwatch_rule_name: PeriodicHiveLambdaSchedule
    cloudwatch_rule_target_event_id: PeriodicHiveID
  tasks:
  - name: load install vars
    include_vars:
      file: install-vars.json
      name: install_vars

  - name: create lambda role
    iam_role:
      name: "{{ iam_role_name }}"
      assume_role_policy_document: "{{ lookup('file', 'lambda/trustpolicy.json') }}"
      description: "Periodic Hive Lambda Role"
    register: iam_role

  - debug:
      var: iam_role
      verbosity: 1

  - name: attach permissions to role
    iam_policy:
      iam_type: role
      iam_name: "{{ iam_role_name }}"
      policy_name: periodicHiveLambdaRolePolicy
      state: present
      policy_document: "lambda/rolepolicy.json"


  - name: zip up lambda function
    archive:
      path: lambda/periodic_lambda_function.py
      dest: lambda.zip
      format: zip
      force_archive: yes

  - name: upload lambda function
    lambda:
      name: "{{ lambda_function_name }}"
      state: present
      zip_file: lambda.zip
      runtime: python3.8
      role: "{{ iam_role.iam_role.role_name }}"
      handler: periodic_lambda_function.lambda_handler
      region: "{{ install_vars.default_region }}"
      timeout: 30
    register: lambda_func

  - debug:
      var: lambda_func
      verbosity: 1

  - name: cleanup zip file
    file:
      state: absent
      path: lambda.zip

  - name: wait for lambda to settle so we can schedule against the latest version
    pause:
      seconds: 10

  - name: set event schedule
    cloudwatchevent_rule:
      name: "{{ cloudwatch_rule_name }}"
      state: present
      #state: disabled
      region: "{{ install_vars.default_region }}"
      description: Run Hive Lambda Function on weekdays
      schedule_expression: "cron(0 22 ? * MON-FRI *)"
      #schedule_expression: "cron(0/10 * * * ? *)"
      targets:
        - id: "{{ cloudwatch_rule_target_event_id }}"
          arn: "{{ lambda_func.configuration.function_arn }}"
          input: '
            {
              "regions": {{ install_vars.regions | to_json }},
              "emailregion": "{{ install_vars.default_region }}",
              "recipients": {{ install_vars.recipients | map("regex_replace", "$", "@" + install_vars.email_domain) | list | to_json }},
              "fromemail": "{{ install_vars.fromemail + "@" + install_vars.email_domain }}"
            } '
    register: event_info

  - debug:
      var: event_info
      verbosity: 1

  - name: allow event to call lambda function
    lambda_policy:
      state: present
      statement_id: lambda-cloudwatch-event-rule
      region: "{{ install_vars.default_region }}"
      function_name: "{{ lambda_func.configuration.function_name }}"
      action: lambda:InvokeFunction
      principal: events.amazonaws.com
      source_arn: "{{ event_info.rule.arn }}"

  - name: apply settings to cloudwatch logs
    cloudwatchlogs_log_group:
      log_group_name: "/aws/lambda/{{ lambda_function_name }}"
      state: present
      retention: 14
      region: "{{ install_vars.default_region }}"
